int ntrials; # number of trials
string button; # get response button
string RT; # get RT of Response in ms
int Response; # get Response 1/0
string hitormiss; # define if response was hit, miss, false alarm or correct rejection
int HowMany1 = 0; int HowMany2 = 0; int HowMany3 = 0; int HowMany4 = 0; # define counter for occurences of block in block order

int trial_onset;			#####
int current_time;			#####
int fixcross_duration; int fix_trial_duration; int fix_clock;	#####

int firstpulse_time; 		################
int npulse; int tpulse; int npulse1;	################

array <int> starting_points [5] = {0,162,324,486,648}; # remove the last part for training

string vari; # variation of experiment rpl vs. ins # probably not necessary anymore
int vio_trial; # variable for defintion of 0/1 if trial is violation or not
int counter = 0; # counts trials in block
string caption_old; # caption recieved from list (1,2,3,4,5,6,7)
string caption_new; # changed number caption (0,4,5,6,7,8,9)
string kind_of_violation; # for output, write level of violation
string violation_number = "0"; # what number is used as violation
double Euro = 0; # extra money won 
string vp_stunde; # vp-hour word

int anzahl_blocks = 4; # number of blocks
int block; # hat is the block
array <string> block_names[anzahl_blocks] = {"Single","Triplet","Nonet","Correct"};
array <string> level_names[anzahl_blocks] = {"LvL1","LvL2","LvL3","True"};

#array<int> isi_array[4][5]={{5300,5300,5300,5300,5300},{5300,5300,5300,5300,5300},{5300,5300,5300,5300,5300},{5300,5300,5300,5300,5300}};
array<int> isi_array[4][5]={{5850,4890,5500,5040,5220},{5720,5790,4270,5110,5610},{4320,5550,5420,5510,5700},{4990,4380,5690,5600,5840}};

# -------------------
# SIZE
# ------------------- 
## Full Screen
#int dheight = display_device.height();
#int dwidth  = display_device.width();

#---------------------------------------------------------------
# LOAD TRIAL FILE
#---------------------------------------------------------------
preset int vp; # name of subject, needs to be NEW, old files are not overwritten
preset int list; # for each starting block (defined by vp= there are 50 diffrent posstibilties auf block orders, created from two concatted DeBruijn-sequences
preset int vp_oder_geld; # choose if participants wants course credit money
#preset int use_matlab = 0;
#preset workspace matlab = new workspace( "Matlab32_2015b", true ); # true already intilizies matlab extension

### diffrent stating blocks based on subject number/vp
double vpd = double(vp);
double fractal = vpd/4 - floor(vpd/4);
if fractal == 0.25 then block = 1; #based on rest, if vp number is divided by 4
elseif fractal == 0.5 then block = 2;
elseif fractal == 0.75 then block = 3;
else block = 4; end; 

ntrials = 162;
vari = "ins";


# ---------------------------------------------------------------------------------#
# LOading all Inoput files
array <string> numbers[ntrials*6][4]; # array with all numbers

int count;
sub # subroutine for loading the number input files
	loading_input (int blk, input_file sub_input_file) 
begin
	string Input = "db_input_"+vari+"_"+level_names[blk]+".txt"; # filename
	sub_input_file.open(Input); # open input file with filename
	sub_input_file.set_delimiter(9);
	count = 0;
	array <string> all_input[ntrials][6];
	loop until sub_input_file.end_of_file() || count == ntrials || !sub_input_file.last_succeeded() begin # read in all lines + columns of input file
		count = count +1;
		sub_input_file.set_delimiter(9);
		all_input[count][1]=sub_input_file.get_string();
		all_input[count][2]=sub_input_file.get_string();
		all_input[count][3]=sub_input_file.get_string();
		all_input[count][4]=sub_input_file.get_string();
		all_input[count][5]=sub_input_file.get_string();
		sub_input_file.set_delimiter(10);
		all_input[count][6]=sub_input_file.get_string();
	end;
	sub_input_file.close();
	loop int ci = 1 until ci > 6 begin # append all columns into one long array and write array in respective column of numbers array
		loop int ni = 1 until ni > ntrials begin
			numbers[((ci-1)*ntrials)+ni][blk] = all_input[ni][ci];
		ni = ni+1;
		end;
		ci = ci +1;
	end; 
end;

#random_list_1.shuffle();random_list_2.shuffle();random_list_3.shuffle();random_list_4.shuffle(); # shuffle the orders --> just influnces the strating points
# also works for the violations list, since they are in the same order thus having the same strating points

int count_r = 0;
array <int> random_list[4][5];
input_file random_list_intputfile = new input_file;
#string inputfile_r = "M:\\RICHIE\\RandomLists\\random_list_"+printf(vp,"%02d")+".txt";
#string inputfile_r = "E:\\RICHIE\\RandomLists\\random_list_"+printf(vp,"%02d")+".txt";
string inputfile_r = "C:\\Users\\BiPsy\\Desktop\\RICHIE\\RandomLists\\random_list_"+printf(vp,"%02d")+".txt";
random_list_intputfile.open(inputfile_r);
random_list_intputfile.set_delimiter(9);
loop until random_list_intputfile.end_of_file() || count_r == anzahl_blocks || !random_list_intputfile.last_succeeded() begin
	count_r = count_r +1;
	random_list_intputfile.set_delimiter(9);
	random_list[count_r][1]=random_list_intputfile.get_int();
	random_list[count_r][2]=random_list_intputfile.get_int();
	random_list[count_r][3]=random_list_intputfile.get_int();
	random_list[count_r][4]=random_list_intputfile.get_int();
	random_list_intputfile.set_delimiter(10);
	random_list[count_r][5]=random_list_intputfile.get_int();
end;
random_list_intputfile.close();

# the real part loading the input files
input_file expdef_beta1 = new input_file;
input_file expdef_beta2 = new input_file;
input_file expdef_beta3 = new input_file;
input_file expdef_beta4 = new input_file;
	
loading_input (1, expdef_beta1);
loading_input (2, expdef_beta2);
loading_input (3, expdef_beta3);
loading_input (4, expdef_beta4);

# load violation files (probably not necessary to rename all variables, but other name was necessary, so to be sure I changed all
# same procedure just with violations files
array <string> violations[ntrials*6][4];

int vio_count;
sub # subroutine
	loading_vio (int vlk, input_file vub_input_file) 
begin
	string vnput = "violations_"+vari+"_"+level_names[vlk]+".txt";
	vub_input_file.open(vnput);
	vub_input_file.set_delimiter(9);
	vio_count = 0;
	array <string> all_vio[ntrials][6];
	loop until vub_input_file.end_of_file() || vio_count == ntrials || !vub_input_file.last_succeeded() begin
		vio_count = vio_count +1;
		vub_input_file.set_delimiter(9);
		all_vio[vio_count][1]=vub_input_file.get_string();
		all_vio[vio_count][2]=vub_input_file.get_string();
		all_vio[vio_count][3]=vub_input_file.get_string();
		all_vio[vio_count][4]=vub_input_file.get_string();
		all_vio[vio_count][5]=vub_input_file.get_string();
		vub_input_file.set_delimiter(10);
		all_vio[vio_count][6]=vub_input_file.get_string();
	end;
	vub_input_file.close();
	loop int cv = 1 until cv > 6 begin
		loop int nv = 1 until nv > ntrials begin
			violations[((cv-1)*ntrials)+nv][vlk] = all_vio[nv][cv];
		nv = nv+1;
		end;
		cv = cv +1;
	end; 
end;
	
# real part loading
input_file vio_beta1 = new input_file;
input_file vio_beta2 = new input_file;
input_file vio_beta3 = new input_file;
input_file vio_beta4 = new input_file;
	
loading_vio (1, vio_beta1);
loading_vio (2, vio_beta2);
loading_vio (3, vio_beta3);
loading_vio (4, vio_beta4);

#-----------------------------------------------------------------------------------------------------#	

# loading the block order defined by starting block and 01-50 number for participant
array <int> block_order [24]; 

#if use_matlab == 0 then # doesn't work with matlab extension so wie use the 01-50 varianat
	int count_int = 0;
	array <int> block_order_input [24];
	input_file block_order_intputfile = new input_file;
	#string inputfile = "M:\\RICHIE\\BlockOrderFiles_2\\block_order_"+string(block)+"_"+printf(list,"%02d")+".txt";
	#string inputfile = "E:\\RICHIE\\BlockOrderFiles_2\\block_order_"+string(block)+"_"+printf(list,"%02d")+".txt";
	string inputfile = "C:\\Users\\BiPsy\\Desktop\\RICHIE\\BlockOrderFiles_2\\block_order_"+string(block)+"_"+printf(list,"%02d")+".txt";
	block_order_intputfile.open(inputfile);
	block_order_intputfile.set_delimiter(10);
	loop until block_order_intputfile.end_of_file() || count_int == block_order.count() || !block_order_intputfile.last_succeeded() begin
		count_int = count_int +1;
		block_order_intputfile.set_delimiter(10);
		block_order_input[count_int]= block_order_intputfile.get_int();
	end;
	block_order_intputfile.close();
	block_order = block_order_input;
#elseif use_matlab == 1 then
#	matlab.initialize();
#	matlab.set_variable("starting_block",block);
#	#matlab.run("addpath 'F:\\Arbeit\\Programmierung\\Presentation\\create_block_order.m'");
#	matlab.run("block_order = create_block_order(starting_block)");
#	matlab.get_variable("block_order", block_order);
#	matlab.shut_down();
#end;
#-----------------------------------------------------------------------------------------------

### Subroutine Trigger #???
sub wait_for_pulse ( int pulse_num )								################
begin																			################
   loop until pulse_manager.main_pulse_count() > pulse_num	################
   begin	#?																	################
   end;	#?																	################
end;																			################


#### START OF EXPERIMENT####
begin		
output_file out_file = new output_file;										

out_file.open(printf(vp,"%02d")+"_output_"+string(block)+"_"+printf(list,"%02d")+"_"+date_time("dd.mm.yy_hh.nn.ss")+".txt"); # "only" works till subject = 99
out_file.print("ID	block	trial_block	trial_cat	trial_total	number	violation	level_violation	onset	duration	Response	Hit_Miss	RT	pre_trial_fixcross_ISI");

Start_trial.present();

npulse = pulse_manager.main_pulse_count();
npulse1 = npulse +2;
wait_for_pulse(npulse1);									################

firstpulse_time = pulse_manager.main_pulse_time(1); #Zeitpunkt des ersten Triggers 	################
out_file.print( "\n"+"first_trigger_at: "+ string(firstpulse_time));						################

npulse = pulse_manager.main_pulse_count();		################
tpulse = pulse_manager.main_pulse_time(npulse); ################
out_file.print( "\n"+ "trigger nr " + string(npulse) + " at " + string(tpulse)); ################


#loop int k = 1 
loop int k = 5
until k > block_order.count() begin
	
# ~1 min break
	if k == 10|| k == 15 || k == 20 then
		npulse = pulse_manager.main_pulse_count();
		tpulse = pulse_manager.main_pulse_time(npulse);
		out_file.print( "\n"+"trigger nr " + string(npulse) + " at " + string(tpulse));
		
		#short_break.set_caption("Sie haben " + string(((double(k)-5)/20)*100) + "% geschafft!\n Kurze Pause...");
		#short_break.redraw();
		#loop int t = 0 until t > 10*60 begin
		#	bar.set_width(1500 - ((t*1500)/(10*60)));
		#	bar_pic.set_part_x(6, 0 - ((t*750)/(10*60)));
		#	progress_bar.present();
		#	t = t+1;
		#end; 
		short_break_cont.set_caption("Sie haben " + string(((double(k)-5)/20)*100) + "% geschafft!\n Kurze Pause...");
		short_break_cont.redraw();
		br_trial.present();
				
		npulse = pulse_manager.main_pulse_count();
		npulse1 = npulse +1;
		wait_for_pulse(npulse1); #calls the subroutine to wait for one additional pulse
		
		npulse = pulse_manager.main_pulse_count();
		tpulse = pulse_manager.main_pulse_time(npulse); 
		
		out_file.print( "\n"+"trigger nr " + string(npulse) + " at " + string(tpulse));		
	end;	
		
	int current_block = block_order[k];
	int stpnt;
	if current_block == 1 then HowMany1 = HowMany1 + 1; stpnt = starting_points[random_list[current_block][HowMany1]]; # couting how many time one kind of block already was presented
	elseif current_block == 2 then HowMany2 = HowMany2 + 1; stpnt = starting_points[random_list[current_block][HowMany2]]; # and using the respective randomized statingpoint for the current block
	elseif current_block == 3 then HowMany3 = HowMany3 + 1; stpnt = starting_points[random_list[current_block][HowMany3]];
	elseif current_block == 4 then HowMany4 = HowMany4 + 1; stpnt = starting_points[random_list[current_block][HowMany4]];
	end;
	
	int pause = isi_array[current_block][(stpnt/ntrials)+1];
# for testing order -> writing block name at the beginning
	#next_block_text.set_caption(block_names[current_block]+", "+string((stpnt/ntrials)+1)+", "+string(pause)); # test
	#next_block_text.redraw(); # test 
	#break_trial.present(); # test
	
	#Blinking Fix_crosses
	trial_number.set_caption("+"); trial_number.set_font_size(135);
	trial_number.redraw();
	fix_event.set_duration(pause-300); fixcross_trial.set_duration(pause); # I feel like the brake after fixcross_trial is longer then in bewteen the others
	fixcross_trial.present();
	fix_blink_trial.present();
	stimulus_data fix_trial_data = stimulus_manager.last_stimulus_data();
	fix_blink_trial.present();fix_blink_trial.present();
	fix_clock = clock.time();
	fix_trial_duration = fix_clock - fix_trial_data.time();

	loop int i = 1 
		#until i  > 1 begin # for testing only 9 instead of 162 trials per block
		until i > ntrials begin
		counter = counter +1;
		int oldResponses = response_manager.total_response_count();
		int newResponses = response_manager.total_response_count();
		caption_old = numbers[i+stpnt][current_block];
		kind_of_violation = violations[i+stpnt][current_block];
		if caption_old == "1" then caption_new = "4"; # renaming old captions to new captions
		elseif caption_old == "2" then caption_new = "5";
		elseif caption_old == "3" then caption_new = "6";
		elseif caption_old == "5" then caption_new = "7";
		elseif caption_old == "6" then caption_new = "8";
		elseif caption_old == "7" then caption_new = "9";
		elseif caption_old == "4" then caption_new = violation_number;
		end; 
		
		trial_number.set_caption(caption_new); trial_number.set_font_size(180);
		#trial_number.set_caption(string(k)+" - "+string(stpnt)+" - "+string(current_block)); # for testing
			
		if numbers[i+stpnt][current_block] == "4" then # defining violation trials
			vio_trial = 1;
		else
			vio_trial = 0;
		end;
		
		trial_number.redraw();
		number_trial.present(); # presenting number
		
		current_time = clock.time(); 	#####
		stimulus_data trial_data = stimulus_manager.last_stimulus_data();	#####
		trial_onset = trial_data.time();	#####
		if i == 1 then fixcross_duration = pause + fix_trial_duration; else fixcross_duration = 0; end; 
			
		Response = 0; # collecting response
		if (response_manager.response_count() > 0) then 
			response_data resp = response_manager.get_response_data(newResponses+1);
			Response = resp.button();
		end;
		
		stimulus_data last = stimulus_manager.last_stimulus_data();
		RT = string(last.reaction_time()); 
			
		if Response != 1 && vio_trial == 0 then # defining outcome of response
			RT = "NA";
			hitormiss = "correct_rejection"; 
		elseif Response != 1 && vio_trial == 1 then
			RT = "NA";
			hitormiss = "miss";
		elseif Response == 1 && vio_trial == 0 then
			hitormiss = "false_alarm";
		elseif Response == 1 && vio_trial == 1 then
			hitormiss = "hit";
			Euro = Euro +2; # if correct hit, money increases
		end;
			
			
		# write in output file
		out_file.print ("\n"+string(vp)+"	"+block_names[current_block]+"	"+string(i)+"	"+string(i+stpnt)+"	"+string(counter)+"	"+
							caption_new+"	"+string(vio_trial)+"	"+kind_of_violation+"	"+string(trial_onset)+"	"+string(current_time - trial_onset)+"	"+
							string(Response)+"	"+hitormiss+"	"+RT+"	"+string(fixcross_duration));
			
		i=i+1;
	end;
	k=k+1;	
	npulse = pulse_manager.main_pulse_count();
	npulse1 = npulse +1;
	wait_for_pulse(npulse1); #calls the subroutine to wait for one additional pulse
end;
#################At end of the experiment######################
npulse = pulse_manager.main_pulse_count();						################ maybe delete
tpulse = pulse_manager.main_pulse_time(npulse); 				################
out_file.print( "\n"+"trigger nr " + string(npulse) + " at " + string(tpulse));	################

if vp_oder_geld == 2 then
	out_file.print ("\n\n" + printf(Euro/100,"%.2f")+"€"+"\n" + "Endtime:" + date_time("dd.mm.yy_hh.nn.ss")); # at the end of output file, wirte down extra money won 
	next_block_text.set_caption("Herzlichen Glückwunsch!\n\nSie haben zusätzlich " + printf(Euro/100,"%.2f")+ "€ erspielt!");
elseif vp_oder_geld == 1 then
	if Euro <= 72 then
		vp_stunde = "keine (0)";
	elseif Euro > 72 && Euro <= 360 then
		vp_stunde = "eine halbe (0,5)";
	elseif Euro > 360 then
		vp_stunde = "eine (1)";
	end ;
	out_file.print ("\n\n"+ "zusaetzlich " + vp_stunde +" VP-Stunde"+"\n" + "Endtime:" + date_time("dd.mm.yy_hh.nn.ss")); # 
	next_block_text.set_caption("Herzlichen Glückwunsch!\n\nSie haben zusätzlich " + vp_stunde+ " VP-Stunde erspielt!");
end; 
next_block_text.redraw(); 
break_trial.present();

End_trial.present(); # The End!
out_file.close();
end;